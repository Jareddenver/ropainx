import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { CustomerOrder } from "../models/components/customerorder.js";
import { CustomerOrderInvoice } from "../models/components/customerorderinvoice.js";
import { CustomerPortalOrdersGenerateInvoiceRequest, CustomerPortalOrdersGenerateInvoiceSecurity } from "../models/operations/customerportalordersgenerateinvoice.js";
import { CustomerPortalOrdersGetRequest, CustomerPortalOrdersGetSecurity } from "../models/operations/customerportalordersget.js";
import { CustomerPortalOrdersInvoiceRequest, CustomerPortalOrdersInvoiceSecurity } from "../models/operations/customerportalordersinvoice.js";
import { CustomerPortalOrdersListRequest, CustomerPortalOrdersListResponse, CustomerPortalOrdersListSecurity } from "../models/operations/customerportalorderslist.js";
import { CustomerPortalOrdersRetryPaymentRequest, CustomerPortalOrdersRetryPaymentSecurity } from "../models/operations/customerportalordersretrypayment.js";
import { CustomerPortalOrdersUpdateRequest, CustomerPortalOrdersUpdateSecurity } from "../models/operations/customerportalordersupdate.js";
import { PageIterator } from "../types/operations.js";
export declare class PolarOrders extends ClientSDK {
    /**
     * List Orders
     *
     * @remarks
     * List orders of the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    list(security: CustomerPortalOrdersListSecurity, request: CustomerPortalOrdersListRequest, options?: RequestOptions): Promise<PageIterator<CustomerPortalOrdersListResponse, {
        page: number;
    }>>;
    /**
     * Get Order
     *
     * @remarks
     * Get an order by ID for the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    get(security: CustomerPortalOrdersGetSecurity, request: CustomerPortalOrdersGetRequest, options?: RequestOptions): Promise<CustomerOrder>;
    /**
     * Update Order
     *
     * @remarks
     * Update an order for the authenticated customer.
     *
     * **Scopes**: `customer_portal:write`
     */
    update(security: CustomerPortalOrdersUpdateSecurity, request: CustomerPortalOrdersUpdateRequest, options?: RequestOptions): Promise<CustomerOrder>;
    /**
     * Generate Order Invoice
     *
     * @remarks
     * Trigger generation of an order's invoice.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    generateInvoice(security: CustomerPortalOrdersGenerateInvoiceSecurity, request: CustomerPortalOrdersGenerateInvoiceRequest, options?: RequestOptions): Promise<any>;
    /**
     * Get Order Invoice
     *
     * @remarks
     * Get an order's invoice data.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    invoice(security: CustomerPortalOrdersInvoiceSecurity, request: CustomerPortalOrdersInvoiceRequest, options?: RequestOptions): Promise<CustomerOrderInvoice>;
    /**
     * Retry Payment
     *
     * @remarks
     * Manually retry payment for a failed order.
     *
     * **Scopes**: `customer_portal:write`
     */
    retryPayment(security: CustomerPortalOrdersRetryPaymentSecurity, request: CustomerPortalOrdersRetryPaymentRequest, options?: RequestOptions): Promise<any>;
}
//# sourceMappingURL=polarorders.d.ts.map