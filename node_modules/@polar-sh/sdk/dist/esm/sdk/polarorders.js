/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { customerPortalOrdersGenerateInvoice } from "../funcs/customerPortalOrdersGenerateInvoice.js";
import { customerPortalOrdersGet } from "../funcs/customerPortalOrdersGet.js";
import { customerPortalOrdersInvoice } from "../funcs/customerPortalOrdersInvoice.js";
import { customerPortalOrdersList } from "../funcs/customerPortalOrdersList.js";
import { customerPortalOrdersRetryPayment } from "../funcs/customerPortalOrdersRetryPayment.js";
import { customerPortalOrdersUpdate } from "../funcs/customerPortalOrdersUpdate.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class PolarOrders extends ClientSDK {
    /**
     * List Orders
     *
     * @remarks
     * List orders of the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async list(security, request, options) {
        return unwrapResultIterator(customerPortalOrdersList(this, security, request, options));
    }
    /**
     * Get Order
     *
     * @remarks
     * Get an order by ID for the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async get(security, request, options) {
        return unwrapAsync(customerPortalOrdersGet(this, security, request, options));
    }
    /**
     * Update Order
     *
     * @remarks
     * Update an order for the authenticated customer.
     *
     * **Scopes**: `customer_portal:write`
     */
    async update(security, request, options) {
        return unwrapAsync(customerPortalOrdersUpdate(this, security, request, options));
    }
    /**
     * Generate Order Invoice
     *
     * @remarks
     * Trigger generation of an order's invoice.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async generateInvoice(security, request, options) {
        return unwrapAsync(customerPortalOrdersGenerateInvoice(this, security, request, options));
    }
    /**
     * Get Order Invoice
     *
     * @remarks
     * Get an order's invoice data.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async invoice(security, request, options) {
        return unwrapAsync(customerPortalOrdersInvoice(this, security, request, options));
    }
    /**
     * Retry Payment
     *
     * @remarks
     * Manually retry payment for a failed order.
     *
     * **Scopes**: `customer_portal:write`
     */
    async retryPayment(security, request, options) {
        return unwrapAsync(customerPortalOrdersRetryPayment(this, security, request, options));
    }
}
//# sourceMappingURL=polarorders.js.map